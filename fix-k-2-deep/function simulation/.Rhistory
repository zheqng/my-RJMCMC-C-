op<-par(mfrow=c(1,1))
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
y.range<-function(dat){
y.range=c(0,0)
for(m in 1:dat$curve.num)
{
range.elem<-range(dat[[m]]$y)
y.range[1]<- min(y.range,range.elem)
y.range[2]<-max(y.range,range.elem)
}
y.range
}
plot.mixgaussian<-function(dat,z,K,make.pdf = FALSE){
# make pdf
if(make.pdf){
pdf('simudata.pdf',
width=15/2.54, height=15/2.54,
family='GB1')
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(dev.off())
} else {
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(par(opar))
}
# plot data
mix.colors =rainbow(K)
op<-par(mfrow=c(1,K))
# plot(dat[[1]]$x,dat[[1]]$y,col=mix.colors[[dat[[1]]$k]],
#      type="l",ylim=y.range(dat),xlab = "",ylab="")
# title(paste(dat[[m]]$k))
for(k in (1:K))
{
index = which(z==k)
m = index[1]
plot(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],ylim= y.range(dat),type="l",xlab = "",ylab="")
for(j in 2:length(index)){
m = index[j]
lines(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],type="l",xlab = "",ylab="")
}
title(paste("the",k,"th component"))
}
op<-par(mfrow=c(1,1))
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
y.range<-function(dat){
y.range=c(0,0)
for(m in 1:dat$curve.num)
{
range.elem<-range(dat[[m]]$y)
y.range[1]<- min(y.range,range.elem)
y.range[2]<-max(y.range,range.elem)
}
y.range
}
plot.mixgaussian<-function(dat,z,K,make.pdf = FALSE){
# make pdf
if(make.pdf){
pdf('simudata.pdf',
width=15/2.54, height=15/2.54,
family='GB1')
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(dev.off())
} else {
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(par(opar))
}
# plot data
mix.colors =rainbow(K)
op<-par(mfrow=c(1,K))
# plot(dat[[1]]$x,dat[[1]]$y,col=mix.colors[[dat[[1]]$k]],
#      type="l",ylim=y.range(dat),xlab = "",ylab="")
# title(paste(dat[[m]]$k))
for(k in (1:K))
{
index = which(z==k)
m = index[1]
plot(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],xlim = c(-4,4),ylim= y.range(dat),type="l",xlab = "",ylab="")
for(j in 2:length(index)){
m = index[j]
lines(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],type="l",xlab = "",ylab="")
}
title(paste("the",k,"th component"))
}
op<-par(mfrow=c(1,1))
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
dat = traindata
z = z.training
K
# plot data
mix.colors =rainbow(K)
op<-par(mfrow=c(1,K))
k=1
index = which(z==k)
m = index[1]
plot(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],xlim = c(-4,4),ylim= y.range(dat),type="l",xlab = "",ylab="")
y.range(dat)
y.range=c(0,0)
dat$curve.num
m=1
range.elem<-range(dat[[m]]$y)
plot(dat[[1]]$y)
View(traindata)
traindata[[1]]$y
K=3
curve.num = 90
Nm = 50
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
z.training = sample(1:K,curve.num,replace= TRUE,prob=PI)
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
m=1
k=z.training[m]
x= runif(Nm,-4,4)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
traindata[[m]]$y
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:M)
{
k=z.training[m]
x= runif(Nm,-4,4)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:curve.num)
{
k=z.training[m]
x= runif(Nm,-4,4)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
y.range<-function(dat){
y.range=c(0,0)
for(m in 1:dat$curve.num)
{
range.elem<-range(dat[[m]]$y)
y.range[1]<- min(y.range,range.elem)
y.range[2]<-max(y.range,range.elem)
}
y.range
}
plot.mixgaussian<-function(dat,z,K,make.pdf = FALSE){
# make pdf
if(make.pdf){
pdf('simudata.pdf',
width=15/2.54, height=15/2.54,
family='GB1')
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(dev.off())
} else {
opar <- par(mar=c(3,3,3,1), mgp=c(1.5,0.5,0))
on.exit(par(opar))
}
# plot data
mix.colors =rainbow(K)
op<-par(mfrow=c(1,K))
# plot(dat[[1]]$x,dat[[1]]$y,col=mix.colors[[dat[[1]]$k]],
#      type="l",ylim=y.range(dat),xlab = "",ylab="")
# title(paste(dat[[m]]$k))
for(k in (1:K))
{
index = which(z==k)
m = index[1]
plot(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],xlim = c(-4,4),ylim= y.range(dat),type="l",xlab = "",ylab="")
for(j in 2:length(index)){
m = index[j]
lines(dat[[m]]$x,dat[[m]]$y,col=mix.colors[k],type="l",xlab = "",ylab="")
}
title(paste("the",k,"th component"))
}
op<-par(mfrow=c(1,1))
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:curve.num)
{
k=z.training[m]
x= runif(Nm,-4,4)
x= sort(x)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/')
these = read.table(file='/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=3
curve.num = 90
Nm = 50
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
z.training = sample(1:K,curve.num,replace= TRUE,prob=PI)
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:curve.num)
{
k=z.training[m]
x= runif(Nm,-4,4)
x= sort(x)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
plot.mixgaussian(traindata,step=step,K=K,make.pdf=TRUE)
# write to file
###################################3
#traindata
unlink('../demo/traindata.dat')
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n")
cat(round(traindata[[m]]$y,digits=4),"\n")
sink()
}
sink()
# sink()
####################################################################3
curve.num.test = 300
Nm.test.known = 40
Nm.test.unkown = 110
Nm.test = Nm.test.known + Nm.test.unkown
z.test=sample(1:K,curve.num.test,replace= TRUE,prob=PI)
valide.dat =vector( "list", curve.num.test)
valide.dat$curve.num=curve.num.test
for(m in 1:curve.num.test)
{
k=z.test[m]
valide.dat[[m]]$k=k;
x=runif(Nm.test,-4,4)
x = sort(x)
valide.dat[[m]]$x = x;
valide.dat[[m]]$y = mvrnorm(n=1,mu=rep(0,Nm.test),
Sigma = cov(x,theta[[k]]))
}
testdata.known = vector("list",curve.num.test)
testdata.unkown = vector("list",curve.num.test)
for(m in 1:curve.num.test)
{
xtoltrain = 1:Nm.test
xindtrain = sample(xtoltrain,Nm.test.known,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
testdata.known[[m]]$x = valide.dat[[m]]$x[xindtrain]
testdata.known[[m]]$y = valide.dat[[m]]$y[xindtrain]
testdata.unknown[[m]]$x = valide.dat[[m]]$x[xresttrain]
testdata.unknown[[m]]$y = valide.dat[[m]]$y[xresttrain]
}
save.image("simudata.RData")
# sink()
####################################################################3
curve.num.test = 300
Nm.test.known = 40
Nm.test.unkown = 110
Nm.test = Nm.test.known + Nm.test.unkown
z.test=sample(1:K,curve.num.test,replace= TRUE,prob=PI)
valide.dat =vector( "list", curve.num.test)
valide.dat$curve.num=curve.num.test
for(m in 1:curve.num.test)
{
k=z.test[m]
valide.dat[[m]]$k=k;
x=runif(Nm.test,-4,4)
x = sort(x)
valide.dat[[m]]$x = x;
valide.dat[[m]]$y = mvrnorm(n=1,mu=rep(0,Nm.test),
Sigma = cov(x,theta[[k]]))
}
testdata.known = vector("list",curve.num.test)
testdata.unknown = vector("list",curve.num.test)
for(m in 1:curve.num.test)
{
xtoltrain = 1:Nm.test
xindtrain = sample(xtoltrain,Nm.test.known,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
testdata.known[[m]]$x = valide.dat[[m]]$x[xindtrain]
testdata.known[[m]]$y = valide.dat[[m]]$y[xindtrain]
testdata.unknown[[m]]$x = valide.dat[[m]]$x[xresttrain]
testdata.unknown[[m]]$y = valide.dat[[m]]$y[xresttrain]
}
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/')
these = read.table(file='/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=3
curve.num = 90
Nm = 50
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
z.training = sample(1:K,curve.num,replace= TRUE,prob=PI)
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:curve.num)
{
k=z.training[m]
x= runif(Nm,-4,4)
x= sort(x)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
plot.mixgaussian(traindata,step=step,K=K,make.pdf=TRUE)
# write to file
rm(list = ls())
library('MCMCpack')
# setwd('/home/zheqng/function simulat')
setwd('/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/')
these = read.table(file='/home/zheqng/src/RJMCMC-my-C/novel perimental/regular/function simulation/theta.txt')
# setwd('/media/zheqng/Seagate Backup Plus Drive/zheqng@nwu/src/RJMCMC-my-C/simu1/2019.2.10/function simulation/')
library("MASS")
source('basicfunc.r')
source('plot.mix.r')
K=3
curve.num = 90
Nm = 50
theta = vector("list",K)
# for(k in 1:100){
PI  = rep(1/K,1,K);
for(k in 1:K){
theta[[k]]$w=these[k,1]
theta[[k]]$v=these[k,2]
theta[[k]]$sigma2=these[k,3]
theta[[k]]$pi = PI[k]
}
z.training = sample(1:K,curve.num,replace= TRUE,prob=PI)
traindata =vector( "list", curve.num)
traindata$curve.num=curve.num
for(m in 1:curve.num)
{
k=z.training[m]
x= runif(Nm,-4,4)
x= sort(x)
traindata[[m]]$x =x
traindata[[m]]$y = mvrnorm(n=1,mu=rep(0,length(x)),
Sigma = cov(x,theta[[k]]))
traindata[[m]]$k=k;
}
# save.image("simudata.RData")
#######################################################
# load("simudata.RData")
plot.mixgaussian(traindata,z.training,K=K)
plot.mixgaussian(traindata,z.training,K=K,make.pdf=TRUE)
# write to file
###################################3
#traindata
unlink('../demo/traindata.dat')
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n")
cat(round(traindata[[m]]$y,digits=4),"\n")
sink()
}
sink()
#traindata
unlink('../demo/traindata.dat')
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n");
cat(round(traindata[[m]]$y,digits=4),"\n");
sink()
}
sink()
# sink()
###################################3
#traindata
unlink('../demo/traindata.dat')
###################################3
#traindata
unlink('../demo/traindata.dat')
sink('../demo/traindata.dat')
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n");
cat(round(traindata[[m]]$y,digits=4),"\n");
sink()
}
###################################3
#traindata
unlink('../demo/traindata.dat')
sink('../demo/traindata.dat')
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n");
cat(round(traindata[[m]]$y,digits=4),"\n");
sink()
}
unlink('../demo/traindata.dat')
sink('../demo/traindata.dat',append = TRUE)
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n");
cat(round(traindata[[m]]$y,digits=4),"\n");
sink()
}
sink()
#traindata
unlink('../demo/traindata.dat')
sink('../demo/traindata.dat',append = TRUE)
for(m in 1:curve.num)
{
cat(traindata[[m]]$x,"\n");
cat(round(traindata[[m]]$y,digits=4),"\n");
}
sink()
curve.num.test = 300
Nm.test.known = 40
Nm.test.unkown = 110
Nm.test = Nm.test.known + Nm.test.unkown
z.test=sample(1:K,curve.num.test,replace= TRUE,prob=PI)
valide.dat =vector( "list", curve.num.test)
valide.dat$curve.num=curve.num.test
for(m in 1:curve.num.test)
{
k=z.test[m]
valide.dat[[m]]$k=k;
x=runif(Nm.test,-4,4)
x = sort(x)
valide.dat[[m]]$x = x;
valide.dat[[m]]$y = mvrnorm(n=1,mu=rep(0,Nm.test),
Sigma = cov(x,theta[[k]]))
}
testdata.known = vector("list",curve.num.test)
testdata.unknown = vector("list",curve.num.test)
for(m in 1:curve.num.test)
{
xtoltrain = 1:Nm.test
xindtrain = sample(xtoltrain,Nm.test.known,replace = FALSE)
xindtrain = sort(xindtrain)
xresttrain = xtoltrain[-xindtrain]
testdata.known[[m]]$x = valide.dat[[m]]$x[xindtrain]
testdata.known[[m]]$y = valide.dat[[m]]$y[xindtrain]
testdata.unknown[[m]]$x = valide.dat[[m]]$x[xresttrain]
testdata.unknown[[m]]$y = valide.dat[[m]]$y[xresttrain]
}
save.image("simudata.RData")
plot.mixgaussian(valide.dat,z.test,K=K)
